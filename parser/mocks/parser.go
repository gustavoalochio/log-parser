// Code generated by MockGen. DO NOT EDIT.
// Source: parser.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "log-parser/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// GetInformationKilledPlayer mocks base method.
func (m *MockParser) GetInformationKilledPlayer(input string) (entity.PlayerKilledInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInformationKilledPlayer", input)
	ret0, _ := ret[0].(entity.PlayerKilledInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInformationKilledPlayer indicates an expected call of GetInformationKilledPlayer.
func (mr *MockParserMockRecorder) GetInformationKilledPlayer(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInformationKilledPlayer", reflect.TypeOf((*MockParser)(nil).GetInformationKilledPlayer), input)
}

// GetInformationPlayerConnected mocks base method.
func (m *MockParser) GetInformationPlayerConnected(input string) (entity.PlayerConnectedInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInformationPlayerConnected", input)
	ret0, _ := ret[0].(entity.PlayerConnectedInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInformationPlayerConnected indicates an expected call of GetInformationPlayerConnected.
func (mr *MockParserMockRecorder) GetInformationPlayerConnected(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInformationPlayerConnected", reflect.TypeOf((*MockParser)(nil).GetInformationPlayerConnected), input)
}

// GetInformationPlayerUpdate mocks base method.
func (m *MockParser) GetInformationPlayerUpdate(input string) (entity.UpdatePlayerInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInformationPlayerUpdate", input)
	ret0, _ := ret[0].(entity.UpdatePlayerInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInformationPlayerUpdate indicates an expected call of GetInformationPlayerUpdate.
func (mr *MockParserMockRecorder) GetInformationPlayerUpdate(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInformationPlayerUpdate", reflect.TypeOf((*MockParser)(nil).GetInformationPlayerUpdate), input)
}

// ParserClientConnect mocks base method.
func (m *MockParser) ParserClientConnect(input string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParserClientConnect", input)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ParserClientConnect indicates an expected call of ParserClientConnect.
func (mr *MockParserMockRecorder) ParserClientConnect(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParserClientConnect", reflect.TypeOf((*MockParser)(nil).ParserClientConnect), input)
}

// ParserClientUserInfoChanged mocks base method.
func (m *MockParser) ParserClientUserInfoChanged(input string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParserClientUserInfoChanged", input)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ParserClientUserInfoChanged indicates an expected call of ParserClientUserInfoChanged.
func (mr *MockParserMockRecorder) ParserClientUserInfoChanged(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParserClientUserInfoChanged", reflect.TypeOf((*MockParser)(nil).ParserClientUserInfoChanged), input)
}

// ParserInitGame mocks base method.
func (m *MockParser) ParserInitGame(input string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParserInitGame", input)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ParserInitGame indicates an expected call of ParserInitGame.
func (mr *MockParserMockRecorder) ParserInitGame(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParserInitGame", reflect.TypeOf((*MockParser)(nil).ParserInitGame), input)
}

// ParserInterval mocks base method.
func (m *MockParser) ParserInterval(input string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParserInterval", input)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ParserInterval indicates an expected call of ParserInterval.
func (mr *MockParserMockRecorder) ParserInterval(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParserInterval", reflect.TypeOf((*MockParser)(nil).ParserInterval), input)
}

// ParserKilled mocks base method.
func (m *MockParser) ParserKilled(input string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParserKilled", input)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ParserKilled indicates an expected call of ParserKilled.
func (mr *MockParserMockRecorder) ParserKilled(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParserKilled", reflect.TypeOf((*MockParser)(nil).ParserKilled), input)
}
